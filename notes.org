* Misc notes
  - Raytracing & intersection formulas: Not a lot of shapes behave this
    way, and not a lot of transformations behave this way.  Meshes and
    voxels (and possibly NURBS and other splines) are a sort of
    exception, but in some sense, the "least" functional one since they
    are basically flat data, not something procedural.
  - What examples can I find for showing how shaders are flexible for
    3D scenes (not 2D)... without actually having to write detailed
    examples?
  - Surface opacity/translucency from shaders!
  - GigaVoxels is sort of procedural too
  - Context Free (recall the April 2019 hack night I did) basically
    also expresses lazy (2D) geometry
  - Maybe show some demoscene stuff like 2nd Reality, and the TRSI TDT
    demo from Cubulus, which I could show directly in DOSBOX.  (This
    isn't really functional, more just procedural.)
  - This is a sort of funny progression:
    - Shaders came about in part from their functional-ish advantages.
    - All sorts of common computers & devices could then run shaders
      directly.
    - Shaders were then used to implement... functional-ish imagery
      via sphere tracers and the like.
  -  [[https://github.com/xx3000/mTec][mTec - Efficient rendering with distance fields]] - see this
* Main focuses for remaining work
  - Lots of picture examples!
  - Lots of code examples!
* TODO Say something on parametric CAD (mention CadQuery, OpenSCAD, maybe FreeCAD)
* TODO Maybe mention "Functional Programming for Compiling and Decompiling Computer-Aided Design"
  - See log.org notes
* TODO Transfer my CS6460 examples
* TODO Explain isosurfaces starting from 2D examples
* TODO Show some implicit surfaces I did in POV-Ray?
* TODO If time: Give some folded IFS-derived fractals.
  - Only do this if there's time.
  - Explaining Mandelbulb formulas in detail is out of scope.  Perhaps
    show Mandelbulb but that's it.
* TODO Find workable sphere tracer (or use what I had)
  - Inigo's is fine if I can just figure out the weird issues
* TODO Code: Show compositions of textures/shaders (e.g. Perlin noise)
  - Note that glslViewer allows animation & interaction here, and easy
    2D, and all of Book of Shaders uses it
* TODO Code: domain transformations in libfive
* TODO Code: GLSL sphere tracer & Perlin noise perturbation
* TODO Code (maybe): Isosurfaces in POV-Ray
* TODO Code (maybe): Shaders in POV-Ray

* Slush Bucket
** Movies & 3D CGI

   - Various practical problems:
     - Raytracing is slow
     - Scanline rendering is faster, but looks bad
     - Image are sort of bulky and inelegant

 #+BEGIN_NOTES
   - Have a good definition/example of scanline rendering
 #+END_NOTES

*** Pixar & RenderMan

    - Facetize everything to triangles < 1 pixel
    - RenderMan Shading Language
    - Pre-compute & pre-shade
    - Distributes easily across a cluster
    - [[https://www.youtube.com/watch?v=ffIZSAZRzDA][Tin Toy (1988)]]: First CGI film to win Oscar
    - Toy Story (1995): First full-length CGI film

** Raytracing limitations: Lighting

   - Simple raytracing by itself handles only *direct illumination*.
   - [[https://en.wikipedia.org/wiki/Global_illumination][Global illumination]]
     - Numerical approximations of the [[https://en.wikipedia.org/wiki/Rendering_equation][rendering equation]]
       - [[https://en.wikipedia.org/wiki/Unbiased_rendering][Unbiased]] vs. biased renderers
     - Path tracing
     - Metropolis Light Transport
     - Photon mapping
     - [[https://en.wikipedia.org/wiki/Radiosity_(computer_graphics)][Radiosity]]
     - [[https://en.wikipedia.org/wiki/Ambient_occlusion][Ambient occlusion]]
   - This is a "hard problem"(tm) and I'm ignoring it here.

 #+BEGIN_NOTES
   - How necessary is this slide?
   - Give real-world example of why this is needed
   - Explain why ray tracing by itself doesn't cover this
   - Show examples of some (e.g. AO)
   - http://www.yafaray.org/documentation/userguide/lightingmethods
 #+END_NOTES


** Modern Day
   - Raytracing is now much more common in movie CGI
   - Intel and NVidia are also pushing it for realtime rendering
   - RenderMan Shading Language is now deprecated
   - Sony Pictures ImageWorks: [[https://github.com/imageworks/OpenShadingLanguage][OSL (Open Shading Language)]]
     - [[http://www.blender.org/][Blender]] implements OSL
     - Appleseed does too


