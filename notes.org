* Links
- http://nuclear.mutantstargoat.com/articles/sdr_fract/
- http://blog.hvidtfeldts.net/index.php/2011/06/distance-estimated-3d-fractals-part-i/
- http://iquilezles.org/www/articles/menger/menger.htm
- http://iquilezles.org/www/articles/juliasets3d/juliasets3d.htm
- http://iquilezles.org/www/articles/mandelbulb/mandelbulb.htm
- http://iquilezles.org/www/articles/distancefractals/distancefractals.htm
- https://www.cs.cmu.edu/~kmcrane/Projects/QuaternionJulia/paper.pdf
  - This doesn't say much about how the formula is derived
- http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2012/10/Evans-Fast_Approximations_for_Lighting_of_Dynamic_Scenes-print.pdf
- https://www.mattkeeter.com/projects/ao/
* TODO Understand rendering model
* TODO Understand DE fractals...
* TODO See if glslViewer works on my laptop
* TODO If glslViewer works, what outputs do I need for CincyFP?
* TODO Could I do this on a Pi?
  - Fast enough?
  - Can I show the GLSL framebuffer and code at the same time?
  - Can I show slides?  (Need GUI probably)
    - Couldn't do speaker notes most likely
* Misc notes
- We ordinarily think of functional programming in contrast to
  imperative programming.  Graphics rendering is an interesting case
  study of a sort of functional programming not in contrast to
  imperative programming - but in contrast to simply static data.
- Shaders are an example of this; ray marchers / sphere tracers are
  another somewhat more obscure one.  Raytracers sort of are in the
  sense that they accomodate ways of composing shapes (like CSG), and
  many functional descriptions of them (though this is a stretch)
- The same guy is behind Book of Shaders and glslViewer
- glslViewer 
- Demoscene & pouet
* Old stuff to show
- Dazzle? Acid Warp?
- SDL Acidity?
- POV-Ray renders?
- Old Python Acidity stuff?
